version: 2.1
# Use a package of configuration called an orb.
destroy_environment:
  steps:
    - run:
        name: Destroy environment
        when: on_fail
        command: |
          aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file cloudfomration-server.yml \
              --stack-name myStack--${CIRCLE_WORKFLOW_ID:0:7}
  # # Exercise: Config and Deployment
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cd ansibles
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
            ansible-playbook -i inventory main-remote.yml
    smoke_test:
      docker:
        - image: alpine:latest
      steps:
        - run:
            name: Test job
            command: return 1
        - destroy_environment
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
